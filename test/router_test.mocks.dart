// Mocks generated by Mockito 5.4.5 from annotations
// in go_router_riverpod_example/test/router_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i10;
import 'dart:ui' as _i12;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/src/widgets/notification_listener.dart' as _i6;
import 'package:flutter/widgets.dart' as _i2;
import 'package:go_router/src/configuration.dart' as _i7;
import 'package:go_router/src/match.dart' as _i5;
import 'package:go_router/src/route.dart' as _i8;
import 'package:go_router/src/state.dart' as _i4;
import 'package:go_router_riverpod_example/auth_repository.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) => super.toString();
}

class _FakeGlobalKey_3<T extends _i2.State<_i2.StatefulWidget>>
    extends _i1.SmartFake
    implements _i2.GlobalKey<T> {
  _FakeGlobalKey_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGoRouterState_4 extends _i1.SmartFake implements _i4.GoRouterState {
  _FakeGoRouterState_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRouteMatchList_5 extends _i1.SmartFake
    implements _i5.RouteMatchList {
  _FakeRouteMatchList_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeListenable_6 extends _i1.SmartFake implements _i3.Listenable {
  _FakeListenable_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Widget get widget =>
      (super.noSuchMethod(
            Invocation.getter(#widget),
            returnValue: _FakeWidget_0(this, Invocation.getter(#widget)),
          )
          as _i2.Widget);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  bool get debugDoingBuild =>
      (super.noSuchMethod(
            Invocation.getter(#debugDoingBuild),
            returnValue: false,
          )
          as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #dependOnInheritedElement,
              [ancestor],
              {#aspect: aspect},
            ),
            returnValue: _FakeInheritedWidget_1(
              this,
              Invocation.method(
                #dependOnInheritedElement,
                [ancestor],
                {#aspect: aspect},
              ),
            ),
          )
          as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(#visitAncestorElements, [visitor]),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
    Invocation.method(#visitChildElements, [visitor]),
    returnValueForMissingStub: null,
  );

  @override
  void dispatchNotification(_i6.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(#dispatchNotification, [notification]),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeElement, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#describeElement, [name], {#style: style}),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeWidget, [name], {#style: style}),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#describeWidget, [name], {#style: style}),
            ),
          )
          as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor({
    required Type? expectedAncestorType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#describeMissingAncestor, [], {
              #expectedAncestorType: expectedAncestorType,
            }),
            returnValue: <_i3.DiagnosticsNode>[],
          )
          as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#describeOwnershipChain, [name]),
            returnValue: _FakeDiagnosticsNode_2(
              this,
              Invocation.method(#describeOwnershipChain, [name]),
            ),
          )
          as _i3.DiagnosticsNode);
}

/// A class which mocks [RouteConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockRouteConfiguration extends _i1.Mock
    implements _i7.RouteConfiguration {
  MockRouteConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GlobalKey<_i2.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(
            Invocation.getter(#navigatorKey),
            returnValue: _FakeGlobalKey_3<_i2.NavigatorState>(
              this,
              Invocation.getter(#navigatorKey),
            ),
          )
          as _i2.GlobalKey<_i2.NavigatorState>);

  @override
  List<_i8.RouteBase> get routes =>
      (super.noSuchMethod(
            Invocation.getter(#routes),
            returnValue: <_i8.RouteBase>[],
          )
          as List<_i8.RouteBase>);

  @override
  _i7.GoRouterRedirect get topRedirect =>
      (super.noSuchMethod(
            Invocation.getter(#topRedirect),
            returnValue:
                (_i2.BuildContext context, _i4.GoRouterState state) => null,
          )
          as _i7.GoRouterRedirect);

  @override
  int get redirectLimit =>
      (super.noSuchMethod(Invocation.getter(#redirectLimit), returnValue: 0)
          as int);

  @override
  _i4.GoRouterState buildTopLevelGoRouterState(_i5.RouteMatchList? matchList) =>
      (super.noSuchMethod(
            Invocation.method(#buildTopLevelGoRouterState, [matchList]),
            returnValue: _FakeGoRouterState_4(
              this,
              Invocation.method(#buildTopLevelGoRouterState, [matchList]),
            ),
          )
          as _i4.GoRouterState);

  @override
  String namedLocation(
    String? name, {
    Map<String, String>? pathParameters = const {},
    Map<String, dynamic>? queryParameters = const {},
    String? fragment,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #namedLocation,
              [name],
              {
                #pathParameters: pathParameters,
                #queryParameters: queryParameters,
                #fragment: fragment,
              },
            ),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(
                #namedLocation,
                [name],
                {
                  #pathParameters: pathParameters,
                  #queryParameters: queryParameters,
                  #fragment: fragment,
                },
              ),
            ),
          )
          as String);

  @override
  _i5.RouteMatchList findMatch(Uri? uri, {Object? extra}) =>
      (super.noSuchMethod(
            Invocation.method(#findMatch, [uri], {#extra: extra}),
            returnValue: _FakeRouteMatchList_5(
              this,
              Invocation.method(#findMatch, [uri], {#extra: extra}),
            ),
          )
          as _i5.RouteMatchList);

  @override
  _i5.RouteMatchList reparse(_i5.RouteMatchList? matchList) =>
      (super.noSuchMethod(
            Invocation.method(#reparse, [matchList]),
            returnValue: _FakeRouteMatchList_5(
              this,
              Invocation.method(#reparse, [matchList]),
            ),
          )
          as _i5.RouteMatchList);

  @override
  _i10.FutureOr<_i5.RouteMatchList> redirect(
    _i2.BuildContext? context,
    _i10.FutureOr<_i5.RouteMatchList>? prevMatchListFuture, {
    required List<_i5.RouteMatchList>? redirectHistory,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #redirect,
              [context, prevMatchListFuture],
              {#redirectHistory: redirectHistory},
            ),
            returnValue: _i10.Future<_i5.RouteMatchList>.value(
              _FakeRouteMatchList_5(
                this,
                Invocation.method(
                  #redirect,
                  [context, prevMatchListFuture],
                  {#redirectHistory: redirectHistory},
                ),
              ),
            ),
          )
          as _i10.FutureOr<_i5.RouteMatchList>);

  @override
  String? locationForRoute(_i8.RouteBase? route) =>
      (super.noSuchMethod(Invocation.method(#locationForRoute, [route]))
          as String?);

  @override
  String debugKnownRoutes() =>
      (super.noSuchMethod(
            Invocation.method(#debugKnownRoutes, []),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#debugKnownRoutes, []),
            ),
          )
          as String);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i11.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Listenable get authStateListenable =>
      (super.noSuchMethod(
            Invocation.getter(#authStateListenable),
            returnValue: _FakeListenable_6(
              this,
              Invocation.getter(#authStateListenable),
            ),
          )
          as _i3.Listenable);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i10.Future<void> logIn({required String? username}) =>
      (super.noSuchMethod(
            Invocation.method(#logIn, [], {#username: username}),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  _i10.Future<void> logOut() =>
      (super.noSuchMethod(
            Invocation.method(#logOut, []),
            returnValue: _i10.Future<void>.value(),
            returnValueForMissingStub: _i10.Future<void>.value(),
          )
          as _i10.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
